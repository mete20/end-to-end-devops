pipeline {
    agent any

    environment {
        GCP_PROJECT = 'devops-school-enuygun'
        DOCKER_CREDENTIALS_ID = 'dockerhub-creds'
        GCR_CREDENTIALS_ID = 'gcr-json-key'
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/mete20/end-to-end-devops.git'
            }
        }
        stage('Build Docker Images') {
            steps {
                script {
                    def services = ['service1', 'service2']
                    for (service in services) {
                        sh "docker build -t yakametehan/end-to-end-${service}:latest -f ./microservices/${service}/Dockerfile.${service} ./microservices/${service}"
                    }
                }
            }
        }
        stage('Push Docker Images') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh "echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin"
                        def services = ['service1', 'service2']
                        for (service in services) {
                            sh "docker push yakametehan/end-to-end-${service}:latest"
                        }
                    }
                }
            }
        }
        stage('Deploy to GKE') {
            steps {
                withCredentials([file(credentialsId: "${GCR_CREDENTIALS_ID}", variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                    sh """
                    helm delete my-app || true
                    helm upgrade --install my-app ./helm-chart \
                        --set service1.image.repository=yakametehan/end-to-end-service1 \
                        --set service1.image.tag=latest \
                        --set service2.image.repository=yakametehan/end-to-end-service2 \
                        --set service2.image.tag=latest
                    """
                }
            }
        }
    }
}
